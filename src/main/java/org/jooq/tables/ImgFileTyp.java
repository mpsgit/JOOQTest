/**
 * This class is generated by jOOQ
 */
package org.jooq.tables;


import java.math.BigDecimal;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Keys;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.Wetrn;
import org.jooq.impl.TableImpl;
import org.jooq.tables.records.ImgFileTypRecord;


/**
 * The format of the Image File itself.  As seen in the Filename suffix. Normally 
 * .jpeg or .gif.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImgFileTyp extends TableImpl<ImgFileTypRecord> {

	private static final long serialVersionUID = -296014661;

	/**
	 * The reference instance of <code>WETRN.IMG_FILE_TYP</code>
	 */
	public static final ImgFileTyp IMG_FILE_TYP = new ImgFileTyp();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ImgFileTypRecord> getRecordType() {
		return ImgFileTypRecord.class;
	}

	/**
	 * The column <code>WETRN.IMG_FILE_TYP.IMG_FILE_TYP_ID</code>. A unique identifier for the format of the Image File itself.  As seen in the Filename suffix. Normally .jpeg or .gif.
	 */
	public final TableField<ImgFileTypRecord, BigDecimal> IMG_FILE_TYP_ID = createField("IMG_FILE_TYP_ID", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "A unique identifier for the format of the Image File itself.  As seen in the Filename suffix. Normally .jpeg or .gif.");

	/**
	 * The column <code>WETRN.IMG_FILE_TYP.IMG_FILE_TYP_DESC_TXT</code>. A description of the format of the Image File itself.  As seen in the Filename suffix. Normally .jpeg or .gif.
	 */
	public final TableField<ImgFileTypRecord, String> IMG_FILE_TYP_DESC_TXT = createField("IMG_FILE_TYP_DESC_TXT", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "A description of the format of the Image File itself.  As seen in the Filename suffix. Normally .jpeg or .gif.");

	/**
	 * The column <code>WETRN.IMG_FILE_TYP.CREAT_USER_ID</code>. The MAPS Application USER ID of the user (person or process) that created the row.
	 */
	public final TableField<ImgFileTypRecord, String> CREAT_USER_ID = createField("CREAT_USER_ID", org.jooq.impl.SQLDataType.VARCHAR.length(35).nullable(false).defaulted(true), this, "The MAPS Application USER ID of the user (person or process) that created the row.");

	/**
	 * The column <code>WETRN.IMG_FILE_TYP.CREAT_TS</code>. The date and time the row was created.
	 */
	public final TableField<ImgFileTypRecord, Date> CREAT_TS = createField("CREAT_TS", org.jooq.impl.SQLDataType.DATE.nullable(false).defaulted(true), this, "The date and time the row was created.");

	/**
	 * The column <code>WETRN.IMG_FILE_TYP.LAST_UPDT_USER_ID</code>. Contains the MAPS USER ID of the user (person or process) that last updated the row.
	 */
	public final TableField<ImgFileTypRecord, String> LAST_UPDT_USER_ID = createField("LAST_UPDT_USER_ID", org.jooq.impl.SQLDataType.VARCHAR.length(35), this, "Contains the MAPS USER ID of the user (person or process) that last updated the row.");

	/**
	 * The column <code>WETRN.IMG_FILE_TYP.LAST_UPDT_TS</code>. The date and time the row was last updated.
	 */
	public final TableField<ImgFileTypRecord, Date> LAST_UPDT_TS = createField("LAST_UPDT_TS", org.jooq.impl.SQLDataType.DATE, this, "The date and time the row was last updated.");

	/**
	 * Create a <code>WETRN.IMG_FILE_TYP</code> table reference
	 */
	public ImgFileTyp() {
		this("IMG_FILE_TYP", null);
	}

	/**
	 * Create an aliased <code>WETRN.IMG_FILE_TYP</code> table reference
	 */
	public ImgFileTyp(String alias) {
		this(alias, IMG_FILE_TYP);
	}

	private ImgFileTyp(String alias, Table<ImgFileTypRecord> aliased) {
		this(alias, aliased, null);
	}

	private ImgFileTyp(String alias, Table<ImgFileTypRecord> aliased, Field<?>[] parameters) {
		super(alias, Wetrn.WETRN, aliased, parameters, "The format of the Image File itself.  As seen in the Filename suffix. Normally .jpeg or .gif.");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ImgFileTypRecord> getPrimaryKey() {
		return Keys.PK_IMG_FILE_TYP;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ImgFileTypRecord>> getKeys() {
		return Arrays.<UniqueKey<ImgFileTypRecord>>asList(Keys.PK_IMG_FILE_TYP);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ImgFileTyp as(String alias) {
		return new ImgFileTyp(alias, this);
	}

	/**
	 * Rename this table
	 */
	public ImgFileTyp rename(String name) {
		return new ImgFileTyp(name, null);
	}
}
